class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj =new ArrayList<ArrayList<Integer>>();
        int m=prerequisites.length;
        int inDegree[]=new int[numCourses];
        int result[]=new int[numCourses];
        for(int i=0;i<numCourses;i++)
        {
            adj.add(new ArrayList<Integer>());
        }
        for (int[] pre : prerequisites) {
        adj.get(pre[1]).add(pre[0]);
        inDegree[pre[0]]++;
    }
         Queue<Integer> q = new LinkedList<>();

        for (int i = 0; i < numCourses; i++) {
            if (inDegree[i] == 0) {
                q.offer(i);
                }
        }
        int count=0;
        while(!q.isEmpty())
        {
            int t=q.poll();
            result[count]=t;
            count++;
            for (int neighbor : adj.get(t)) {
            inDegree[neighbor]--;
            if (inDegree[neighbor] == 0) {
                q.offer(neighbor);
                }
            }
        }
        if(count==numCourses)
        return result;
        else return (new int[0]);
    }
}
