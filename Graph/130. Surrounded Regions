class Solution {
    public void solve(char[][] board) {
        boolean visited[][]=new boolean[board.length][board[0].length];
        int m=board.length;
        int n=board[0].length;
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(i==0 || i== board.length-1 || j==0 || j==board[1].length-1)
                {
                    if(board[i][j]=='O' )
                    {
                        dfs(i,j,m,n,board);
                    }
                }
            }
        }
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(board[i][j]=='O')
                {
                    board[i][j]='X';
                }
                if(board[i][j]=='S')
                {
                    board[i][j]='O';
                }
            }
        }
    }
    public void dfs(int i,int j,int m,int n,char[][] board)
        {
            if(i<0 || j<0 || i>=m || j>=n)
            return;
            if(board[i][j]=='O')
            {
                board[i][j]='S';
                dfs(i+1,j,m,n,board);
                dfs(i-1,j,m,n,board);
                dfs(i,j+1,m,n,board);
                dfs(i,j-1,m,n,board);

            }
            else 
            return;
        }
}
