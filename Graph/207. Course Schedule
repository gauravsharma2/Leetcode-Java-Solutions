/*
You start with nodes that have no prerequisites (inDegree == 0).

You remove them one-by-one and reduce the in-degree of their dependents.

If there's a cycle, you'll be stuck with some nodes having in-degree > 0 â†’ count < numCourses.
*/
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
    List<List<Integer>> adj = new ArrayList<>();
    int[] inDegree = new int[numCourses];

    for (int i = 0; i < numCourses; i++) {
        adj.add(new ArrayList<>());
    }

    for (int[] pre : prerequisites) {
        adj.get(pre[1]).add(pre[0]);
        inDegree[pre[0]]++;
    }

    Queue<Integer> q = new LinkedList<>();

    for (int i = 0; i < numCourses; i++) {
        if (inDegree[i] == 0) {
            q.offer(i);
        }
    }

    int count = 0;

    while (!q.isEmpty()) {
        int curr = q.poll();
        count++;

        for (int neighbor : adj.get(curr)) {
            inDegree[neighbor]--;
            if (inDegree[neighbor] == 0) {
                q.offer(neighbor);
            }
        }
    }

    return count == numCourses;
}

}
